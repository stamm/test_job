require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CartsController do
  let(:valid_attributes) { {  } }

  context 'needing login' do

    it "GET index" do
      get :index
      expect(response).to redirect_to(new_user_session_path)
    end

    it "GET new" do
      get :new
      expect(response).to redirect_to(new_user_session_path)
    end



    it "POST create" do
      post :create
      expect(response).to redirect_to(new_user_session_path)
    end

    context 'with exists cart' do
      before(:each) do
        @cart = Cart.create! valid_attributes
      end
      it "GET show" do
        get 'show', {:id => @cart.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "GET edit" do
        get :edit, {:id => @cart.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "PUT update" do
        put :update, {:id => @cart.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "DELETE destroy" do
        delete :destroy, {:id => @cart.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  context 'login in' do
    login_user
    describe "DELETE destroy" do
      before(:each) do
        @cart = Cart.create! valid_attributes
        @session = {cart_id: @cart.id}
      end
      it "destroys the requested cart" do
        expect {
          delete :destroy, {:id => @cart.to_param}, @session
        }.to change(Cart, :count).by(-1)
      end

      it "redirects to the carts list" do
        delete :destroy, {:id => @cart.to_param}, @session
        response.should redirect_to(store_url)
      end
    end
  end
end
